#!/usr/bin/env ruby

require 'ipaddr'
require 'optparse'
require 'digest/sha1'
require 'fileutils'
require 'yaml'
require 'shellwords'
require 'tempfile'
require 'timeout'
require 'bundler'
require 'mkmf'

module Porta
  def root
    File.expand_path('../..', __FILE__)
  end

  def basedir
    File.expand_path('..', root)
  end

  module_function :root, :basedir

  DEFAULTS_OPTIONS = {
    porta_dir: "#{basedir}/porta",
    zync_dir: "#{basedir}/zync",
    branch: nil,
    project: nil,
    quay_repo: 'quay.io/3scale/porta',
    threescale_operator_dir: "#{basedir}/3scale-operator",
    openshift_template: 'amp-eval-s3',
    porta_image: nil,
    apisonator_image: 'quay.io/3scale/apisonator:latest',
    apicast_image: 'quay.io/3scale/apicast:latest',
    zync_image: 'quay.io/3scale/zync:nightly',
    porxy_image: 'quay.io/guicassolato/porxy:latest',
    memcached_image: 'registry.redhat.io/3scale-amp20/memcached',
    cluster_endpoint: nil,
    wildcard_domain: nil,
    cluster_domain: nil,
    registry_secrets_glob: nil,
    operator_channel: nil,
    operator_source: nil,
    aws_access_key_id: nil,
    aws_secret_access_key: nil,
    aws_bucket: nil,
    aws_region: nil,
    master_password: 'p',
    admin_password: 'p',
    admin_access_token: 'secret',
    internal_api_user: 'system_app',
    internal_api_password: 'password',
    config_events_hook: 'http://master-account.3scale.localhost:3000/master/events/import',
    config_events_hook_shared_secret: 'supersecret',
    apicast_access_token: 'apicastsecret',
    apicast_registry_url: 'https://policies.apicast.io/latest/policies.json',
    sidekiq_prometheus_port: "9395",
    zync_prometheus_port: "9396",
    zync_authentication_token: 'zync_token',
    zync_endpoint: 'http://127.0.0.1:5000',
    porta_local_provider_api: 'http://provider-admin.3scale.localhost:3000',
    # host/ip of localhost inside container is autodetected but one can override
    container_internal_host: nil,
    database_url: {
      mysql: 'mysql2://root:@127.0.0.1:3306/3scale_system_development',
      postgres: 'postgresql://postgres:@localhost/3scale_system_development',
      oracle: 'oracle-enhanced://rails:railspass@127.0.0.1:1521/systempdb'
    },
    watch_deploy: false,
    verbose: false,
    dryrun: false
  }

  def settings
    settings_path = File.join(root, 'config', 'settings.yml')
    YAML.load_file(settings_path).fetch('settings', {}).transform_keys(&:to_sym).tap { |settings|
      porta = settings.delete(:porta)
      zync = settings.delete(:zync)
      apisonator = settings.delete(:apisonator)
      sidekiq = settings.delete(:sidekiq)
      porta&.each { |k, v| settings["porta_#{k}".to_sym] = v }
      zync&.each { |k, v| settings["zync_#{k}".to_sym] = v }
      apisonator&.each { |k, v| settings["apisonator_#{k}".to_sym] = v }
      sidekiq&.each { |k, v| settings["sidekiq_#{k}".to_sym] = v }
    }
  rescue Errno::ENOENT
    {}
  end

  module_function :settings

  module Container
    def stop_container(name)
      system("#{container_tool} stop #{name} 2>/dev/null || echo \"#{name}\"")
    end
  end

  module Apisonator
    include Container

    def run_apisonator
      run_apisonator_listener && run_apisonator_worker
    end

    def stop_apisonator
      stop_apisonator_listener
      stop_apisonator_worker
    end

    def with_apisonator_env
      return unless block_given?
      Tempfile.open('apisonator_env') do |f|
        f.write apisonator_env_str
        f.flush
        yield f.path
      end
    end

    def apisonator_env_str
      env = options[:apisonator_env] || {}
      env["CONFIG_INTERNAL_API_USER"] ||= options[:internal_api_user]
      env["CONFIG_INTERNAL_API_PASSWORD"] ||= options[:internal_api_password]
      env["CONFIG_EVENTS_HOOK"] ||= options[:config_events_hook]
      env["CONFIG_EVENTS_HOOK_SHARED_SECRET"] ||= options[:config_events_hook_shared_secret]
      env["CONFIG_QUEUES_MASTER_NAME"] ||= "#{container_internal_host}:6379/5"
      env["CONFIG_REDIS_PROXY"] ||= "#{container_internal_host}:6379/6"
      env["RACK_ENV"] ||= "production"
      env.map { |k, v| "#{k}=#{v}" }.join("\n")
    end

    def run_apisonator_listener
      with_apisonator_env do |env_file|
        sync = (%w[CONFIG_REDIS_ASYNC=1 CONFIG_REDIS_ASYNC=true] & File.readlines(env_file, chomp: true)).empty?
        server_param = "-s falcon" unless sync

        system("#{container_tool} run -d --name apisonator --rm #{container_runtime_opts} -p 3001:3001 --env-file #{env_file} -it #{options[:apisonator_image]} 3scale_backend #{server_param} start --bind [::] -p 3001 >/dev/null && echo \"apisonator\"")
      end
    end

    def run_apisonator_worker
      with_apisonator_env do |env_file|
        system("#{container_tool} run -d --name apisonator_worker --rm #{container_runtime_opts} --env-file #{env_file} -it #{options[:apisonator_image]} 3scale_backend_worker run >/dev/null && echo \"apisonator_worker\"")
      end
    end

    def stop_apisonator_listener
      stop_container("apisonator")
    end

    def stop_apisonator_worker
      stop_container("apisonator_worker")
    end
  end

  class BaseOptionParser < ::OptionParser
    def initialize
      @options = deep_merge(DEFAULTS_OPTIONS, Porta.settings)

      super do |opts|
        opts.banner = banner
        yield(opts) if block_given?
      end
    end

    attr_reader :options

    def parse!
      super
      options
    end

    protected

    def command
      self.class.name.split('::').last.gsub(/OptionParser/, '').downcase
    end

    def banner
      <<~BANNER
        Usage: porta #{command} [options]

        Options:
      BANNER
    end

    # @note this one does not merge Arrays
    def deep_merge(base_hash, override_hash)
      base_hash.merge(override_hash) do |key, oldval, newval|
        if oldval.kind_of?(Hash) && newval.kind_of?(Hash)
          deep_merge(oldval, newval)
        else
          newval
        end
      end
    end
  end

  class CommandOptionParser < BaseOptionParser
    def initialize
      super do |opts|
        opts.on(*command_options(:porta_dir, 'Path to the Porta directory in the file system'))
        yield(opts) if block_given?
        opts.on(*command_options(:dryrun, 'Prints the commands instead of executing them', '--dry-run'))
        opts.on(*command_options(:verbose, 'Prints every command executed', '--verbose'))
        opts.on(*options_for_help)
      end

      options[:branch] ||= porta_branch
    end

    protected

    def command_options(opt, description, *args, &block)
      desc = description
      desc += " (default: '#{options[opt]}')" if options[opt]

      flag = args.shift
      flag = "--#{opt.to_s.gsub(/_/, '-')}=VALUE" unless flag&.start_with?('-')

      set_value_block = ->(value) { options[opt] = value }

      [flag, *args, desc, block ? block : set_value_block]
    end

    def options_for_help
      command_options(:help, 'Prints this help', '--help') do |value|
        puts self
        exit
      end
    end

    def porta_branch
      `cd #{options[:porta_dir]}; git rev-parse --abbrev-ref HEAD`.chomp
    end
  end

  class RailsEnvOptionParser < CommandOptionParser
    def initialize
      super do |opts|
        yield(opts) if block_given?
        opts.on(*command_options(:apicast_registry_url, 'URL to a public APIcast policy registry'))
        opts.on(*command_options(:mysql_db, "Uses Porta's MySQL database URL (default)", '--mysql'))
        opts.on(*command_options(:postgres_db, "Uses Porta's PostgreSQL database URL", '--psql'))
        opts.on(*command_options(:oracle_db, "Uses Porta's Oracle database URL", '--oracle'))
        opts.on(*command_options(:stdout_log, "Output logs to STDOUT", '--with-logs'))
      end
    end
  end

  class CustomRailsCommandOptionParser < RailsEnvOptionParser
    def parse!
      super

      # this is custom command to run in the environment instead of the default one
      unless ARGV.empty?
        options[:custom_command] = ARGV.dup.freeze
        ARGV.clear
      end

      options
    end

    def banner
      super.sub(/^\s*Usage:.*$/, "\\0 [-- CUSTOM_CMD ARG1 ... ARGN]")
    end
  end

  class ServerOptionParser < CustomRailsCommandOptionParser; end

  class SidekiqOptionParser < CustomRailsCommandOptionParser
    def initialize
      super do |opts|
        opts.on(*command_options(:concurrency, 'Number of threads (default: 2)'))
        opts.on(*command_options(:queues, 'Sidekiq queues to enable (comma-separated)'))
        opts.on(*command_options(:except_queues, 'Sidekiq queues to disable (comma-separated)'))
      end
    end
  end

  class ResetOptionParser < RailsEnvOptionParser; end

  class AssetsOptionParser < RailsEnvOptionParser; end

  class TestOptionParser < RailsEnvOptionParser
    def initialize
      super

      return if ARGV[0] && !ARGV[0].start_with?('-')
      puts self
      exit 128
    end

    protected

    def banner
      <<~BANNER
        Usage: porta #{command} [options] FILE

        Options:
      BANNER
    end
  end

  class CukeOptionParser < TestOptionParser; end

  class DepsOptionParser < CommandOptionParser
    def initialize
      super do |opts|
        opts.on(*command_options(:zync_dir, 'Path to the Zync directory in the file system'))
        opts.on(*command_options(:apisonator_image, 'Apisonator image to launch in a container'))
        opts.on(*command_options(:apicast_image, 'APIcast image to launch in a container'))
        opts.on(*command_options(:porxy_image, 'Porxy image to launch in a container'))
        opts.on(*command_options(:deps_down, 'Stops porta dependencies running', '--down'))
        opts.on(*command_options(:deps_status, 'Prints status of porta dependencies running', '--status'))
        opts.on(*command_options(:apisonator, 'Runs apisonator (listener and worker)', '--apisonator'))
        opts.on(*command_options(:apicast, 'Runs APIcast (with Porxy)', '--apicast'))
        opts.on(*command_options(:sphinx, 'Runs Sphinx', '--sphinx'))
        opts.on(*command_options(:zync, 'Runs Zync and Zync Que', '--zync'))
      end
    end
  end

  class ExecOptionParser < CommandOptionParser
    def initialize
      super do |opts|
        opts.on(*command_options(:zync, 'Run command in Zync'))
        opts.on(*command_options(:server, 'Run command in Server'))
      end
    end
  end

  class ResyncOptionParser < RailsEnvOptionParser; end

  class BuildOptionParser < CommandOptionParser; end

  class PortaImageOptionParser < CommandOptionParser
    def initialize
      super do |opts|
        yield(opts) if block_given?
      end
    end

    def parse!
      super

      options[:project] ||= options[:branch].gsub(/\//, '-')
      options[:porta_image] ||= build_porta_image

      options
    end

    protected

    def build_porta_image
      "#{options[:quay_repo]}:porta-#{options[:project]}"
    end
  end

  class PushOptionParser < PortaImageOptionParser
    def initialize
      super do |opts|
        opts.on(*command_options(:quay_repo, 'Name of the quay.io repo where to push the Porta image'))
        opts.on(*command_options(:project, 'Name of the project. Used to built the image tag to push to quay.io (defaults to the name of the current branch of the Porta repo)'))
      end
    end
  end

  class DeployOptionParser < PortaImageOptionParser
    def initialize
      super do |opts|
        opts.on(*command_options(:threescale_operator_dir, 'Path to the 3scale-operator directory in the file system', '--operator-dir=VALUE'))
        opts.on(*command_options(:deploy_with_templates, "Deploys using the 3scale OpenShift templates (as oposed to using the 3scale operator, default: false)", '--with-templates'))
        opts.on(*command_options(:operator_channel, "3scale operator subscription channel"))
        opts.on(*command_options(:operator_source, "3scale operator subscription source"))
        opts.on(*command_options(:openshift_template, "OpenShift template file – no need to include '.yml' in the end"))
        opts.on(*command_options(:project, 'Name of the OpenShift project (defaults to the name of the current branch of the Porta repo)'))
        opts.on(*command_options(:porta_image, "Porta image to deploy (default: '#{options[:quay_repo]}:porta-<project>')"))
        opts.on(*command_options(:apisonator_image, 'Apisonator image to deploy'))
        opts.on(*command_options(:apicast_image, 'APIcast image to deploy'))
        opts.on(*command_options(:zync_image, 'Zync image to deploy'))
        opts.on(*command_options(:memcached_image, 'Memcached image to deploy'))
        opts.on(*command_options(:cluster_domain, 'Domain of the OpenShift cluster where to deploy Porta'))
        opts.on(*command_options(:wildcard_domain, "Wildcard/termination domain for all external domains of the application (default: '<random-hash>.apps.<cluster_domain>')"))
        opts.on(*command_options(:registry_secrets_glob, 'Glob to the private registry secret files in the file system', '--private-secrets=VALUE'))
        opts.on(*command_options(:apicast_registry_url, 'URL to a public APIcast policy registry'))
        opts.on(*command_options(:watch_deploy, 'Whether to watch status of the pods right after deploy', '--[no-]watch'))
      end
    end

    def parse!
      super

      options[:cluster_endpoint] ||= build_cluster_endpoint
      options[:wildcard_domain] ||= build_wildcard_domain

      options
    end

    protected

    def build_cluster_endpoint
      host = ['api', options[:cluster_domain]].join('.')
      "https://#{host}:6443"
    end

    def build_wildcard_domain
      hashed_project_name = Digest::SHA1.hexdigest(options[:project])[0..6]
      [hashed_project_name, 'apps', options[:cluster_domain]].join('.')
    end
  end

  class DataOptionParser < CommandOptionParser; end

  class HelpOptionParser < BaseOptionParser
    def initialize
      super do |opts|
        puts opts
        exit
      end
    end

    protected

    def banner
      <<~BANNER
        Usage: porta CMD

        Commands:
          server       Starts the Rails server locally
          sidekiq      Starts a Sidekiq worker locally
          reset        Resets Porta's databases (Redis and DBMS)
          exec         Execute a custom shell command with component environment
          data         Generates fake data (uses the Admin API, server must be running)
          assets       Removes node_modules and precompile assets again
          test         Bundle execs a Porta's Rails test file
          cuke         Bundle execs a Porta's Cucumber test file
          deps         Runs components that Porta depends upon – (in a container) Apisonator, APIcast and porxy; (daemonized) Zync and Sphinx
          resync       Resyncs Porta with Apisonator (Sidekiq and Apisonator must both be running)
          build        Builds Porta for OpenShift
          push         Pushes latest `system-os` container image to quay.io
          deploy       Deploys 3scale to an OpenShift devel cluster, fetching images from quay.io
          help         Prints this help
      BANNER
    end
  end

  class CommandRunner
    def initialize(options = {})
      @options = options
    end

    attr_reader :options

    def run
      raise NoMethodError, __method__
    end

    protected

    # @note this method will not be needed if we start supporting only Podman 5
    def podman?
      return @podman if defined? @podman

      @podman = system('podman --version > /dev/null 2>&1')
    end

    # On Podman 4 and some docker installations neither host.containers.internal nor
    #   host.docker.internal are not setup within the container.
    # @return [Boolean] whether host.containers.internal or host.docker.internal are supported by the container runtime
    # @note this method will not be needed if we start supporting only Podman 5
    def need_to_add_internal_hosts?
      return @need_to_add_internal_hosts if defined? @need_to_add_internal_hosts

      @need_to_add_internal_hosts = !container_default_internal_ip
    end

    # @note this method will not be needed if we start supporting only Podman 5
    def container_tool
      @container_tool ||= podman? ? 'podman' : 'docker'
    end

    # @note this method will not be needed if we start supporting only Podman 5
     def container_default_internal_host
      @container_internal_host ||= podman? ? "host.containers.internal" : "host.docker.internal"
    end

    def container_default_internal_ip
      return @container_default_internal_ip if defined? @container_default_internal_ip

      container_default_internal_ip = `#{container_tool} run --rm --entrypoint /bin/bash #{options[:apicast_image]} -c 'getent ahostsv4 #{container_default_internal_host} | awk \"{ print \\$1; exit }\"'`.strip
      if container_default_internal_ip.empty?
        @container_default_internal_ip = nil
      else
        IPAddr.new(container_default_internal_ip)
        @container_default_internal_ip = container_default_internal_ip
      end
    end

    # @return [String] the IP that --add-host=somehostname:host-gateway option would produce inside a container
    # @note this method will not be needed if we start supporting only Podman 5 (or it can replace #container_default_internal_ip)
    def container_internal_ip_from_host_gateway
      return @container_internal_ip_from_host_gateway if @container_internal_ip_from_host_gateway

      container_internal_ip_from_host_gateway = `#{container_tool} run --rm --add-host=trialhost:host-gateway --entrypoint /bin/bash #{options[:apicast_image]} -c 'getent ahostsv4 trialhost | awk \"{ print \\$1; exit }\"'`.strip
      IPAddr.new(container_internal_ip_from_host_gateway)
      @container_internal_ip_from_host_gateway = container_internal_ip_from_host_gateway
    end

    # @return [String] hostname or IP address to access the container host
    # @note this method will not be needed if we start supporting only Podman 5
    def container_internal_host
      options[:container_internal_host] ||= need_to_add_internal_hosts? ? container_default_gw : container_default_internal_host
    end

    # @return [String] IP address to access the container host
    # @note this method will not be needed if we start supporting only Podman 5 (can be replaced by #container_default_internal_ip)
    def container_internal_ip
      @container_internal_ip ||= if need_to_add_internal_hosts?
        if host_gateway_supported?
          container_internal_ip_from_host_gateway
        else
          container_default_gw # last resort, it assumes we are running on Podman 4 in slirp4netns rootless default network mode
        end
      else
        container_default_internal_ip
      end
    end

    # With docker and podman/slirp4netns the returned gw is an IP of the host OS
    # on podman/pasta though, this is the local OS network gw so not really useful
    # @return [String] IP address of default gateway from within the container
    # @note this method will not be needed if we start supporting only Podman 5
    def container_default_gw(image: nil)
      gw_ip_cmd = %{printf "%d.%d.%d.%d" $(awk '$2 == 00000000 && $8 == 00000000 { for (i = 8; i >= 2; i=i-2) { print "0x" substr($3, i-1, 2) } }' /proc/net/route)}
      `#{container_tool} run #{container_slirp4netns_arg} --rm --entrypoint /bin/bash #{image || options[:apicast_image]} -c #{gw_ip_cmd.shellescape}`
    end

    # @return [String] necessary slirp4netns
    # @note this method will not be needed if we start supporting only Podman 5
    #   also `need_to_add_internal_hosts?` ensures this will only be non-blank on Podman 4 and earlier
    def container_slirp4netns_arg
      return @slirp4netns if defined? @slirp4netns

      @slirp4netns = podman? && need_to_add_internal_hosts? ? "--net slirp4netns:allow_host_loopback=true,enable_ipv6=false" : ""
    end

    # @return [Boolean] whether container runtime supports the option --add-host=some.example.com:host-gateway
    # @note this method is not supposed to be needed if we start supporting only
    #       Podman 5. But there are some issues with pasta and bridge mode,
    #       see https://github.com/containers/podman/issues/19213
    def host_gateway_supported?
      return @host_gateway_supported if defined? @host_gateway_supported

      @host_gateway_supported = system("#{container_tool} run --rm --add-host=trialhost:host-gateway --entrypoint /bin/true #{options[:apicast_image]}")
    end

    # @return [String] the ip or magic value that we should use in `--add-host=target.hostname:ip_or_magic_value`
    # @note this method will not be needed if we start supporting only Podman 5
    def container_add_host_target
      @container_add_host_target ||= host_gateway_supported? ? "host-gateway" : container_internal_ip
    end

    # @return [String] the --add-hosts options needed to start containers
    # @note this method can be simplified if we start supporting only Podman 5
    def container_add_hosts_arg
      return @container_add_hosts_arg if @container_add_hosts_arg

      hosts = []
      hosts << "master-account.3scale.localhost" # TODO: make this configuration once porxy supports a dynamic value

      if need_to_add_internal_hosts?
        hosts << "host.containers.internal" << "host.docker.internal"
      end

      @container_add_hosts_arg = hosts.map { |h| "--add-host=#{h}:#{container_add_host_target}" }.join(" ")
    end

    # When podman sees 127.0.0.1 it removes it and replaces with default values if no other nameservers are in the file.
    #   see: https://github.com/containers/podman/issues/3277#issuecomment-499924888
    # @return [String] the necessary `--dns` arg to run containers when local resolver is used
    def container_dns_arg
      @container_dns_arg ||= if File.read("/etc/resolv.conf") =~ /^\s*nameserver\s+127\.0\.0\.1$/
        "--dns=#{container_internal_ip}"
      else
        ""
      end
    end

    # this would hopefully work with podman 4 and docker but not tehost_gateway_supportedsted
    def container_runtime_opts
      "#{container_slirp4netns_arg} #{container_dns_arg} #{container_add_hosts_arg}"
    end

    def porta_common_envs
      envs = {
        'DATABASE_URL' => database_url,
        'APICAST_REGISTRY_URL' => options[:apicast_registry_url],
        'prometheus_multiproc_dir' => "#{porta_dir}/tmp/metrics",
        # needed to setup db on postgres and mysql
        # issue is https://github.com/rails/rails/issues/27299
        # fixed with https://github.com/jmks/rails/commit/53e9438ef2c5a442502abd67728d172e53a075d9
        'TEST_ENV_NUMBER' => '_discard',
      }
      envs['RAILS_LOG_TO_STDOUT'] = '1' if stdout_log?
      envs
    end

    def exec_in_porta(envs = {}, sub: nil, &block)
      in_porta(:exec, envs, sub: sub, &block)
    end

    alias exec_in_server exec_in_porta

    def in_porta(action = :system, envs = {}, sub: nil, &block)
      run_in_porta(sub: sub) do
        command_env = porta_common_envs.merge(envs)
        ensure_dir(command_env["prometheus_multiproc_dir"])
        send(action, command_env, with_ruby_wrapper(block.call))
      end
    end

    def run_in_porta(sub: nil, &block)
      dir = porta_dir
      dir = File.join(dir, sub) if sub
      run_in_dir(dir, &block)
    end

    def zync_common_envs
      envs = options[:zync_env] || {}
      envs["ZYNC_AUTHENTICATION_TOKEN"] ||= options[:zync_authentication_token]
      envs
    end

    def exec_in_zync(envs = {}, sub: nil, &block)
      in_zync(:exec, envs, sub: sub, &block)
    end

    def in_zync(action = :system, envs = {}, sub: nil, &block)
      run_in_zync(sub: sub) do
        send(action, zync_common_envs.merge(envs), with_ruby_wrapper(block.call))
      end
    end

    def run_in_zync(sub: nil, &block)
      dir = zync_dir
      dir = File.join(dir, sub) if sub
      run_in_dir(dir, &block)
    end

    def run_in_3scale_operator(&block)
      run_in_dir(threescale_operator_dir, &block)
    end

    def run_in_dir(dir, &block)
      puts "[DIR] #{dir}" if options[:verbose]
      with_unbundled_env do
        Dir.chdir(dir, &block)
      end
    end

    def with_unbundled_env(&block)
      Bundler.respond_to?(:with_unbundled_env) ? Bundler.with_unbundled_env(&block) : Bundler.with_clean_env(&block)
    end

    def with_ruby_wrapper(cmd)
      cmd = cmd.map(&:shellescape).join(" ") if cmd.is_a?(Array)
      case
      when find_executable0('rbenv')
        with_rbenv(cmd)
      when find_executable0('asdf')
        with_asdf(cmd)
      else
        cmd
      end
    end

    def with_asdf(cmd)
      shell = ENV["SHELL"] || "sh"
      "asdf env ruby -- #{shell} -c #{cmd.shellescape}"
    end

    def with_rbenv(cmd)
      ruby_version = begin
        File.read('.ruby-version').chomp
      rescue Errno::ENOENT
        `rbenv version-name`.chomp
      end
      ruby_dir = File.expand_path("~/.rbenv/versions/#{ruby_version}/bin")
      "unset RUBYOPT; export PATH=\"#{ruby_dir}:$PATH\"; #{cmd}"
    end

    def system(*args)
      print_command(*args)
      options[:dryrun] ? true : Kernel.system(*args)
    end

    def exec(*args)
      print_command(*args)
      Kernel.exec(*args) unless options[:dryrun]
    end

    def print_command(*args)
      return unless options[:verbose] || options[:dryrun]

      command_args = args.dup
      envs = command_args.shift

      if envs.is_a?(Hash)
        envs = envs.empty? ? nil : (['export', envs.to_a.map { |env| env.join('=') }].join(' ') + ';')
        cmd = [envs, *command_args].compact
      else
        cmd = [envs, *command_args]
      end

      puts "[CMD] #{cmd.join(' ')}"
    end

    def ensure_dir(dir)
      return if dir.to_s.empty?
      FileUtils.mkdir_p(dir)
    end

    def porta_dev_tools_dir
      Porta.root
    end

    def porta_dir
      File.expand_path(options[:porta_dir])
    end

    def zync_dir
      File.expand_path(options[:zync_dir])
    end

    def threescale_operator_dir
      File.expand_path(options[:threescale_operator_dir])
    end

    def oracle?
      database_adapter == :oracle
    end

    def database_adapter
      ((options.keys & %i[mysql_db postgres_db oracle_db]).first || :mysql).to_s.delete('_db').to_sym
    end

    def database_url
      options.dig(:database_url, database_adapter)
    end

    def stdout_log?
      options[:stdout_log]
    end

    def macos?
      /darwin/ =~ RUBY_PLATFORM
    end

    def linux?
      !macos?
    end
  end

  class PortaCommand < CommandRunner
    def run
      exec_in_porta(envs) { command }
    end

    private

    def command
      options[:custom_command] || default_command
    end
  end

  class ServerCommand < PortaCommand
    protected

    def envs
      {
        "OBJC_DISABLE_INITIALIZE_FORK_SAFETY" => "YES",
        "UNICORN_WORKERS" => "8",
        "PORT" => "3000",
        "CONFIG_INTERNAL_API_USER" => options[:internal_api_user],
        "CONFIG_INTERNAL_API_PASSWORD" => options[:internal_api_password],
      }
    end

    private

    def default_command
      "rails server -b 0.0.0.0"
    end
  end

  class SidekiqCommand < PortaCommand
    QUEUES = %w[backend_sync billing critical default deletion events low mailers priority web_hooks zync].freeze

    protected

    def envs
      {
        "CONFIG_INTERNAL_API_USER" => options[:internal_api_user],
        "CONFIG_INTERNAL_API_PASSWORD" => options[:internal_api_password],
        "ZYNC_AUTHENTICATION_TOKEN" => options[:zync_authentication_token],
        "ZYNC_ENDPOINT" => options[:zync_endpoint],
        "PROMETHEUS_EXPORTER_PORT" => options[:sidekiq_prometheus_port].to_s,
      }
    end

    def concurrency
      options[:concurrency] || 2
    end

    def queues
      active_queues - except_queues
    end

    def active_queues
      only_queues.any? ? only_queues : QUEUES
    end

    def except_queues
      options[:except_queues]&.split(',') || []
    end

    def only_queues
      options[:queues]&.split(',') || []
    end

    private

    def default_command
      queues_arg = queues.map { |queue| "--queue #{queue}" }
      "bundle exec sidekiq #{queues_arg.join(' ')} -c #{concurrency}"
    end
  end

  class ResetCommand < CommandRunner
    def run
      reset_redis
      reset_system
      reset_zync
      reset_sphinx
    end

    def reset_redis
      system('redis-cli flushall') || raise("redis-cli execution failed")
    end

    def reset_system
      # TODO: with run_apisonator_listener/stop_apisonator_listener we may avoid
      #       the need to resync after the reset. But it is somehow slow.
      in_porta(:system, porta_additional_envs) { "bundle exec rails db:reset" } || raise("db:reset in Porta failed")
    end

    def reset_sphinx
      in_porta { "bundle exec rake ts:clear" } || raise("rake ts:clear failed")
    end

    def reset_zync
      in_zync { "bundle exec rails db:reset" } || raise("db:reset in Zync failed")
    end

    def porta_additional_envs
      vars = {
        'MASTER_PASSWORD' => options[:master_password],
        "USER_PASSWORD" => options[:admin_password],
        "ADMIN_ACCESS_TOKEN" => options[:admin_access_token],
        "APICAST_ACCESS_TOKEN" => options[:apicast_access_token],
        # to update backend at db:seed
        "CONFIG_INTERNAL_API_USER" => options[:internal_api_user],
        "CONFIG_INTERNAL_API_PASSWORD" => options[:internal_api_password],
      }
      vars['ORACLE_SYSTEM_PASSWORD'] = 'threescalepass' if oracle?
      vars
    end
  end

  class AssetsCommand < CommandRunner
    def run
      in_porta { 'yarn clean && yarn install --check-files' } && exec_in_porta { 'bundle exec rake assets:clean assets:precompile' }
    end
  end

  class TestCommand < CommandRunner
    def run
      exec_in_porta { "bundle exec rails test #{ARGV.last}" }
    end
  end

  class CukeCommand < CommandRunner
    def run
      exec_in_porta { "bundle exec cucumber #{ARGV.last}" }
    end
  end

  class DepsCommand < CommandRunner
    include Apisonator
    include Container

    def run
      return status if options[:deps_status]

      op = options[:deps_down] ? "stop" : "run"

      all = options.slice(:apisonator, :apicast, :sphinx, :zync).empty?

      send("#{op}_apisonator") if all || options[:apisonator]
      send("#{op}_porxy") && send("#{op}_apicast") if all || options[:apicast]
      # send("#{op}_apicast") if all || options[:apicast]
      send("#{op}_sphinx") if all || options[:sphinx]
      send("#{op}_zync") if all || options[:zync]
    end

    protected

    CONTAINER_DEPS = %w[apicast porxy apisonator_worker apisonator].freeze

    def run_porxy
      system("#{container_tool} run -d --name porxy --rm #{container_runtime_opts} -p 3008:3008 #{options[:porxy_image]} >/dev/null && echo \"porxy\"")
    end

    def run_apicast
      # we publish to 127.0.0.1 in particular because apicast only binds to
      # IPv4 presently and current podman/pasta do not forward IPv6 connections
      # to the exposed port. But still connection is created by kernel and
      # immediately closed by pasta.
      # The IP 127.0.0.1 can be removed when one of these happen:
      #   * apicast binds to IPv6 (THREESCALE-11943)
      #   * podman is fixed (https://github.com/containers/podman/issues/27125)
      system("#{container_tool} run -d --name apicast --rm -p 127.0.0.1:8080:8080 #{container_runtime_opts} -e THREESCALE_PORTAL_ENDPOINT=\"http://#{options[:apicast_access_token]}@#{container_internal_ip}:3008/master/api/proxy/configs\" -e THREESCALE_DEPLOYMENT_ENV=staging -e APICAST_LOG_LEVEL=info -e BACKEND_ENDPOINT_OVERRIDE=\"http://#{container_internal_ip}:3001\" #{options[:apicast_image]} >/dev/null && echo \"apicast\"")
    end

    def run_sphinx
      return true if sphinx_running?
      in_porta { "bundle exec rake ts:stop ts:configure ts:start &>#{porta_dir}/log/development.searchd.log && echo sphinx" }
    end

    def run_zync
      return true unless zync_installed?
      run_zync_puma && run_zync_que
    end

    def run_zync_puma
      in_zync(:system, {'PROMETHEUS_EXPORTER_PORT' => "#{options[:zync_prometheus_port]}"}) do
        "bundle exec rails server -p 5000 &>#{zync_dir}/log/development.log & echo zync"
      end
    end

    def run_zync_que
      in_zync(:system, {'PROMETHEUS_EXPORTER_PORT' => "#{options[:zync_prometheus_port]}"}) do
        "bundle exec que &>#{zync_dir}/log/development.log & echo que"
      end
    end

    def stop_apicast
      stop_container("apicast")
    end

    def stop_porxy
      stop_container("porxy")
    end

    def stop_sphinx
      return puts 'sphinx' unless sphinx_running?
      in_porta { 'bundle exec rake ts:stop &>/dev/null && echo sphinx' }
    end

    def stop_zync
      return true unless zync_installed?
      stop_zync_puma
      stop_zync_que
    end

    def stop_zync_puma
      return puts 'zync' unless zync_puma_running?
      system("ps ax | grep -v grep | grep puma | grep zync | awk '{ print $1 }' | xargs kill && echo zync")
    end

    def stop_zync_que
      return puts 'que' unless zync_que_running?
      system("ps ax | grep -v grep | grep 'bin/que' | awk '{ print $1 }' | xargs kill && echo que")
    end

    def sphinx_running?
      `ps ax | grep -v grep | grep -c searchd`.chomp.to_i > 0
    end

    def zync_puma_running?
      `ps ax | grep -v grep | grep puma | grep -c zync`.chomp.to_i > 0
    end

    def zync_que_running?
      `ps ax | grep -v grep | grep -c 'bin/que'`.chomp.to_i > 0
    end

    def zync_installed?
      Dir.exist?(zync_dir)
    end

    def status
      components = [*CONTAINER_DEPS, 'sphinx', 'zync', 'que']

      running = CONTAINER_DEPS.reject { |component| `#{container_tool} ps --filter=\"name=#{component}\" -q`.chomp.empty? }
      running << 'sphinx' if sphinx_running?
      running << 'zync' if zync_puma_running?
      running << 'que' if zync_que_running?

      not_running = components - running

      indent = ->(arr) { arr.map { |component| "\t#{component}\n" }.join }

      printf "\nRunning:\n#{indent.call(running)}"
      printf "\nNot running:\n#{indent.call(not_running)}\n"
    end
  end

  class ExecCommand < CommandRunner
    def run
      %i(server zync).each do |opt|
        next unless options[opt]

        return send("exec_in_#{opt}") { options[opt] }
      end
    end
  end

  class ResyncCommand < CommandRunner
    def run
      exec_in_porta { 'bundle exec rake backend:storage:enqueue_rewrite' }
    end
  end

  class BuildCommand < CommandRunner
    def run
      run_in_porta(sub: 'openshift/system') { exec 'make build' }
    end
  end

  class PushCommand < CommandRunner
    def run
      porta_image = options[:porta_image]
      system("#{container_tool} tag $(#{container_tool} images -q system-os) #{porta_image}") && exec("#{container_tool} push #{porta_image}")
    end
  end

  class DeployCommand < CommandRunner
    def run
      return unless openshift_login && openshift_new_project && upload_private_registry_secrets && openshift_deploy
      exec('watch -n 3 "oc get pods | grep -viE \'Completed|OOMKilled\'"') if options[:watch_deploy]
      true
    end

    protected

    def openshift_login
      return true if Kernel.system('oc whoami >/dev/null 2>/dev/null')

      puts 'OpenShift login token:'
      openshift_token = STDIN.gets.chomp

      system("oc login --token=#{openshift_token} --server=#{options[:cluster_endpoint]}")
    end

    def openshift_new_project
      system("oc new-project #{options[:project]}")
    end

    def pull_secret_files
      Dir.glob(File.expand_path(options[:registry_secrets_glob]))
    end

    def upload_private_registry_secrets
      pull_secret_files.each do |file_path|
        system("oc create -f \"#{file_path}\"")
      end
    end

    def link_private_registry_secrets
      Timeout::timeout(30) do
        # checks for up to 30s if the 3scale-operator service account is available
        until system('oc get sa/3scale-operator')
          puts "retrying..."
          sleep(0.5)
        end
      end

      pull_secret_files.each do |file_path|
        secret = YAML.load(File.read(file_path))
        system("oc secrets link 3scale-operator #{secret.dig('metadata', 'name')} --for=pull")
      end
    end

    def openshift_deploy
      deploy_with_operator? ? deploy_with_operator : deploy_with_templates
    end

    def deploy_with_operator?
      !deploy_with_templates?
    end

    def deploy_with_templates?
      options[:deploy_with_templates]
    end

    def s3_deployment?
      return options[:openshift_template].include?('s3') if deploy_with_templates?

      api_manager_yml = openshift_file_path('100__api-manager')
      File.readlines(api_manager_yml).grep(/aws-auth/).any?
    end

    PARAMS = %i[
      wildcard_domain
      porta_image apisonator_image apicast_image zync_image memcached_image
      master_password admin_password admin_access_token
      apicast_registry_url apicast_access_token
    ].freeze

    AWS_S3_PARAMS = %i[aws_access_key_id aws_secret_access_key aws_bucket aws_region]

    TEMPLATES_CORRESPONDENCE_PARAM_NAMES = {
      porta_image: 'AMP_SYSTEM_IMAGE',
      apisonator_image: 'AMP_BACKEND_IMAGE',
      apicast_image: 'AMP_APICAST_IMAGE',
      zync_image: 'AMP_ZYNC_IMAGE'
    }.freeze

    def deploy_with_operator
      sed_patterns = params_for_operator.map { |param, value| "s/\\\${#{param}}/#{value.shellescape.gsub(/\//, '\/')}/g" }
      sed_command = "sed -e '#{sed_patterns.join(';')}'"

      apply_with_sed = ->(glob) do
        Dir.glob(File.expand_path(glob)).sort.each do |file_path|
          system("#{sed_command} #{file_path} | oc apply -f -")
        end
      end

      apply_with_sed.call(openshift_file_path('pre-secrets/*'))

      link_private_registry_secrets

      apply_with_sed.call(openshift_file_path('*'))
    end

    def deploy_with_templates
      params_command = params_for_templates.map { |param, value| "--param #{param}=\"#{value}\"" }.join(' ')

      run_in_3scale_operator do
        system("oc new-app --file pkg/3scale/amp/auto-generated-templates/amp/#{options[:openshift_template]}.yml #{params_command}")
      end
    end

    def openshift_file_path(resource_name)
      File.join(File.dirname(File.expand_path(__FILE__)), '..', 'openshift', "#{resource_name}.yml")
    end

    def params
      params = PARAMS.dup
      params.push(*AWS_S3_PARAMS) if s3_deployment?
      params.map { |param| [param.upcase, options[param]] }.to_h
    end

    def params_for_operator
      options.slice(:project, :operator_channel, :operator_source).transform_keys(&:upcase).merge(params)
    end

    def params_for_templates
      params.transform_keys do |key|
        key_sym = key.downcase.to_sym
        TEMPLATES_CORRESPONDENCE_PARAM_NAMES.key?(key_sym) ? TEMPLATES_CORRESPONDENCE_PARAM_NAMES[key_sym].upcase : key
      end
    end
  end

  class DataCommand < CommandRunner
    def run
      run_in_dir(porta_dev_tools_dir) { exec with_ruby_wrapper('ruby lib/fake_data.rb') }
    end
  end
end

command = ARGV.shift
command = "help" if !command || %w[--help -h].include?(command)
command = command.capitalize
option_parser_class = begin
  Porta.const_get("#{command}OptionParser".to_sym)
rescue NameError => exception
  Porta::HelpOptionParser if exception.message =~ /uninitialized constant/ or raise
end
parser = option_parser_class.new
options = parser.parse!

command_class = command ? Porta.const_get("#{command}Command".to_sym) : Porta::CommandRunner
runner = command_class.new(options)

runner.run
